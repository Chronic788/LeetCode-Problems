Clone Graph - Medium Problem						                       Graphs, Depth First Search
---------------
---------------

Problem Statement
-----------------

Given a reference of a node in a connected undirected graph, return a deep copy (clone)
 of the graph. Each node in the graph contains a val (int) and a list (List[Node]) of its neighbors.

Example:

Input:
{"$id":"1","neighbors":[{"$id":"2","neighbors":[{"$ref":"1"},{"$id":"3","neighbors":[{
"$ref":"2"},{"$id":"4","neighbors":[{"$ref":"3"},{"$ref":"1"}],"val":4}],"val":3}],
"val":2},{"$ref":"4"}],"val":1}

Explanation:
Node 1's value is 1, and it has two neighbors: Node 2 and 4.
Node 2's value is 2, and it has two neighbors: Node 1 and 3.
Node 3's value is 3, and it has two neighbors: Node 2 and 4.
Node 4's value is 4, and it has two neighbors: Node 1 and 3.
 

Note:

The number of nodes will be between 1 and 100.
The undirected graph is a simple graph, which means no repeated edges and no self-loops in the graph.
Since the graph is undirected, if node p has node q as neighbor, then node q must have node p as neighbor too.
You must return the copy of the given node as a reference to the cloned graph.
		  

------------------------------------------------------------------------------------------

Solution
------------

class Solution {
    
    Map<Integer, Node> map = new HashMap<>();
    
    public Node cloneGraph(Node node) {
        
        //If we've visited before just return the visited node
        if(map.containsKey(node.val))
            return map.get(node.val);
        
        //Create a list of neigbors
        List<Node> neighbors = new ArrayList<>();
        //Clone the node
        Node clone = new Node(node.val, neighbors);
        //Mark as visited
        map.put(node.val, clone);
        //Add all neighbors to the node passed in
        for(Node neighbor : node.neighbors){
            neighbors.add(cloneGraph(neighbor));
        }
        
        return clone;
    }
}
------------------------------------------------------------------------------------
------------------------------------------------------------------------------------

Notes:
------
Didnt get this one. First attempt at a graph problem. I had the right idea though so
that was good. I didnt get the notion to return visited nodes to put in the neighbors
list. I knew about keeping a neighbors list but got lost in the implementation.

Complexity:
-----------
O(n^2). Every time we clone a graph node we must clone all of its neighbors which may
be the entire graph.