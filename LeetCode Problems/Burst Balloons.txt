Burst Balloons - Hard Problem                                          Dynamic Programming
---------------
---------------

Problem Statement
-----------------

Given n balloons, indexed from 0 to n-1. Each balloon is painted with a number on it
represented by array nums. You are asked to burst all the balloons. If the you burst
balloon i you will get nums[left] * nums[i] * nums[right] coins. Here left and right
 are adjacent indices of i. After the burst, the left and right then becomes adjacent.

Find the maximum coins you can collect by bursting the balloons wisely.

Note:

You may imagine nums[-1] = nums[n] = 1. They are not real therefore you can not burst them.
0 = n = 500, 0 = nums[i] = 100
Example:

Input: [3,1,5,8]
Output: 167
Explanation: nums = [3,1,5,8] --> [3,5,8] -->   [3,8]   -->  [8]  --> []
             coins =  3*1*5      +  3*5*8    +  1*3*8      + 1*8*1   = 167

------------------------------------------------------------------------------------------

Solution
--------

import java.util.*;

public class BurstBalloons {


  public static void main(String[] args) {
    int[] x = {3,1,5,8};
    System.out.println(maxCoins(x));
  }

  public static int maxCoins(int[] nums) {

    //For convenience's sake, we will first create a new array composed of the nums
    //array with a 1 on either side.
    int[] arr = new int[nums.length + 2];
    arr[0] = 1;
    arr[arr.length - 1] = 1;
    for(int i = 0; i < nums.length; i++) {
     arr[i + 1] = nums[i];
    }

    //Now create the memoizer
    int[][] dp = new int[arr.length][arr.length];

    //And start the bottom up approach
    return burster(arr, 1, arr.length - 1, dp);
  }

  private static int burster(int[] nums, int i, int j, int[][] dp) {

    if(i == j) {
     return 0;
    } else if(dp[i][j] != 0) {
     return dp[i][j];
    }
    int max = Integer.MIN_VALUE;
    for(int k = i; k < j; k++) {
     max = Math.max(burster(nums, i, k, dp) +
                    burster(nums, k + 1, j, dp) +
                    nums[i - 1] * nums[k] * nums[j], max);
    }
    dp[i][j] = max;
    return max;
  }

  //Bottom up dynamic programming starts with the smallest elements possible.
  //In this case, the smallest possible search space is an array of one element.
  //By first considering sub arrays of length one, we immediately know what gain
  //we will earn by bursting that single balloon. Further along, when we consider
  //subarrays of length 2, we can use what we already know about the single balloon
  //bursts that are stored in the memoizer. Notice that in the algorithm, we first
  //check to see if there is already something in the matrix location. If there is,
  //we return it and do not compute anything. We continue increasing the size of the
  //array until it is expansive over the entire array.


}

------------------------------------------------------------------------------------
------------------------------------------------------------------------------------

Complexity:
-----------
I am not entirely sure but the complexity here looks to be O(n^3). The outer for loop in the
recursive method is O(n) and there are two recursive calls in it for a max of O(n^3) at worst.