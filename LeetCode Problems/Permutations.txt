Perumations        -  Medium Problem                                         Backtracking
---------------
---------------

Problem Statement
-----------------

Given a collection of distinct integers, return all possible permutations.

Example:

Input: [1,2,3]
Output:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]

------------------------------------------------------------------------------------------

Solution
------------

class Solution {
  public List<List<Integer>> permute(int[] nums) {
   List<List<Integer>> results = new ArrayList<>();
   helper(results, 0, nums);
   return results;
  }
  
  public void helper(List<List<Integer>> results, int start, int[] nums) {
    
    //We have a whole permutation
    if(start == nums.length - 1) {
      List<Integer> list = new ArrayList<>();
      for(int i : nums)
        list.add(i);
      results.add(list);
    }
    
    //For the rest of the items in the set
    for(int i = start; i < nums.length; i++){
     //Swap the indeces
     swap(nums, i, start);
     //Recurse with a smaller array (index moved to the right)
     helper(results, start + 1, nums);
     //unswap the indeces because we are in place
     swap(nums, i, start);
    }
    
  }
  
  
  public void swap(int[] nums, int i, int j) {
   int temp = nums[i];
   nums[i] = nums[j];
   nums[j] = temp;
  }
}

------------------------------------------------------------------------------------
------------------------------------------------------------------------------------

Notes:
------
Review and remember this one. Permutations are a critical subject. You thought of the
concept of swapping. Go with your instinct and flesh it all the way out with an example.

Complexity:
-----------
O(n^n).