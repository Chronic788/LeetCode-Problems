Merge K Sorted Lists - Hard Problem									Linked Lists and Priority Queues
---------------
---------------
Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.

Example:

Input:
[
  1->4->5,
  1->3->4,
  2->6
]
Output: 1->1->2->3->4->4->5->6

--------------------------------------------------------------------------------------------------

Solution
--------

  public ListNode mergeKLists(ListNode[] lists) {
   if(lists == null)
     return null;
   
   ListNode merge = null;
   
   PriorityQueue<Integer> numbers = new PriorityQueue<>();
   
   //For each list
   for(int i = 0; i < lists.length; i++){
    ListNode head = lists[i];
    if(head != null) {
     numbers.add(head.val); 
    }
    lists[i] = list[i].next;
   }
   
   ListNode current = merge;
   while(!numbers.isEmpty()) {
    current.next = new ListNode(numbers.remove());
    current = current.next;
   }
   
   return merge.next; 
  }
  
  public class ListNode {
   int val;
   ListNode next;
   ListNode(int x) { val = x;}
  }
	
------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------

Complexity:
-----------
O(n^2)