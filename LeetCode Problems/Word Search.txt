Word Search - Medium Problem											     Depth First Search
---------------
---------------
Given a 2D board and a word, find if the word exists in the grid.

The word can be constructed from letters of sequentially adjacent cell, where "adjacent" cells
are those horizontally or vertically neighboring. The same letter cell may not be used more 
than once.

Example:

board =
[
  ['A','B','C','E'],
  ['S','F','C','S'],
  ['A','D','E','E']
]

Given word = "ABCCED", return true.
Given word = "SEE", return true.
Given word = "ABCB", return false.


--------------------------------------------------------------------------------------------------

Solution
--------


//Okay so each cell is a potential starting point for a word.
//We should test each cell as the starting point in order.
//At each cell there is a choice to take a step in any of the
//four caridinal directions so we must test each one. We should
//carry along the word itself and the word so far in the search.
//We know we need an out of bounds check. We need to keep track
//if the x and y position. The same cell may not be used more
//than once. We can store in another 2d grid of booleans whether
//a cell has been visited or not.


public class WordSearch {
 
  public static void main(String[] args){
    
  }
  
  public WordSearch() {
    
    char[][] arr = {{'A', 'B', 'C', 'E'},{'S', 'F', 'C', 'S'},{'A', 'D', 'E', 'E'}};
    
    printTruth(exist(arr, "ABCCED"));
    printTruth(exist(arr, "SEE"));
    printTruth(exist(arr, "ABCB"));
  }
  
  public void printTruth(boolean t) {
   if(t)
     System.out.println("True");
   else
     System.out.println("False");
  }
  
  public boolean exist(char[][] board, String word) {
    
    if(word == "" || word == null || board == null)
      return false;
    
    //Load a 2d array with indicators of having been visited or not
    boolean[][] visited = new boolean[board.length][board[0].length];
    for(int i = 0; i < visited.length; i++) {
      for(int j = 0; j < visited[i].length; j++) {
        visited[i][j] = false;
      }
    }
    
    for(int i = 0; i < board.length; i++) {
      for(int j = 0; j < board[0].length; j++) {
        if(search(board, word, new StringBuilder(), i, j, visited))
          return true;
      }
    }
    
    return false;
  }
  
  public boolean search(char[][] board, String word, StringBuilder search, int i, int j, boolean[][] visited) {
    
    if(i < 0 || j < 0 || i >= board.length || j >= board[i].length)
      return false;
    
    //Mark visited
    visited[i][j] = true;
    //Append
    search.append(board[i][j]);
    
    //Check if we have found the word
    if(search.toString().equals(word))
      return true;
    else {
      //Left
      boolean found1 = search(board, word, search, i--, j, visited);
      //Right
      boolean found2 = search(board, word, search, i++, j, visited);
      //Up
      boolean found3 = search(board, word, search, i, j--, visited);
      //Down
      boolean found4 = search(board, word, search, i, j++, visited);
      
      return found1 || found2 || found3 || found4;
    }
    
  }
  
}

------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------

Complexity:
-----------
O(n^3)