Intersection of Two Arrays - Easy Problem                                	  Hash Sets
---------------
---------------

Problem Statement
-----------------

Given an m x n matrix of non-negative integers representing the height of each unit cell
in a continent, the "Pacific ocean" touches the left and top edges of the matrix and the
"Atlantic ocean" touches the right and bottom edges.

Water can only flow in four directions (up, down, left, or right) from a cell to another
 one with height equal or lower.

Find the list of grid coordinates where water can flow to both the Pacific and Atlantic
ocean.

Note:

    The order of returned grid coordinates does not matter.
    Both m and n are less than 150.

Example:

Given the following 5x5 matrix:

  Pacific ~   ~   ~   ~   ~
       ~  1   2   2   3  (5) *
       ~  3   2   3  (4) (4) *
       ~  2   4  (5)  3   1  *
       ~ (6) (7)  1   4   5  *
       ~ (5)  1   1   2   4  *
          *   *   *   *   * Atlantic

Return:

[[0, 4], [1, 3], [1, 4], [2, 2], [3, 0], [3, 1], [4, 0]] (positions with parentheses in above matrix).



------------------------------------------------------------------------------------------

Solution
--------

class Solution {
    public List<int[]> pacificAtlantic(int[][] matrix) {
        /*
         * Flood FROM the ocean algorithm!
         * run DFS From pacific / atlantic
         */
        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) return new ArrayList<int[]>();
        int m = matrix.length, n = matrix[0].length;
        boolean[][] pVisited = new boolean[m][n];
        boolean[][] aVisited = new boolean[m][n];
        for (int j = 0; j < n; j++) {
            dfs(pVisited, matrix, 0, j, 0, m, n);
            dfs(aVisited, matrix, m - 1, j, 0, m, n);
        }
        for (int i = 0; i < m; i++) {
            dfs(pVisited, matrix, i, 0, 0, m, n);
            dfs(aVisited, matrix, i, n - 1, 0, m, n);
        }

        List<int[]> pAndA = new ArrayList<int[]>();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (pVisited[i][j] && aVisited[i][j]) {
                    pAndA.add(new int[] {i, j});
                }
            }
        }
        return pAndA;
    }

    private void dfs(boolean[][] visited, int[][] matrix, int i, int j, int prev, int m, int n) {
        if (i < 0 || i >= m || j < 0 || j >= n || visited[i][j] || matrix[i][j] < prev) return;
        visited[i][j] = true;
        dfs(visited, matrix, i + 1, j, matrix[i][j], m, n);
        dfs(visited, matrix, i - 1, j, matrix[i][j], m, n);
        dfs(visited, matrix, i, j + 1, matrix[i][j], m, n);
        dfs(visited, matrix, i, j - 1, matrix[i][j], m, n);
    }
}

------------------------------------------------------------------------------------
------------------------------------------------------------------------------------

Notes
-----

Just thought about this one. No need to attempt it. I realize now that it would
be best to do dfs on pacific and atlantic separately. This one is a pretty
straightforward one for dfs.

Complexity:
-----------
For this one it is a little tough. The DFS part is O(4^n). The pacificAtlantic algorithm
is O(n^2).