Max Area of Island - Medium Problem                                Depth First Search
---------------
---------------

Problem Statement
-----------------
Given a non-empty 2D array grid of 0's and 1's, an island is a group of 1's 
(representing land) connected 4-directionally (horizontal or vertical.) You 
may assume all four edges of the grid are surrounded by water.

Find the maximum area of an island in the given 2D array. (If there is no 
island, the maximum area is 0.)

Example 1:

[[0,0,1,0,0,0,0,1,0,0,0,0,0],
 [0,0,0,0,0,0,0,1,1,1,0,0,0],
 [0,1,1,0,1,0,0,0,0,0,0,0,0],
 [0,1,0,0,1,1,0,0,1,0,1,0,0],
 [0,1,0,0,1,1,0,0,1,1,1,0,0],
 [0,0,0,0,0,0,0,0,0,0,1,0,0],
 [0,0,0,0,0,0,0,1,1,1,0,0,0],
 [0,0,0,0,0,0,0,1,1,0,0,0,0]]
Given the above grid, return 6. Note the answer is not 11, because the island must be connected 4-directionally.
Example 2:

[[0,0,0,0,0,0,0,0]]
Given the above grid, return 0.
Note: The length of each dimension in the given grid does not exceed 50.

------------------------------------------------------------------------------------------

Solution
------------

class Solution {
    int[][] grid;
    boolean[][] seen;

    public int area(int r, int c) {
        //If it is out of bounds then it doenst add to the area
        if (r < 0 || r >= grid.length || c < 0 || c >= grid[0].length ||
                seen[r][c] || grid[r][c] == 0)
            return 0;
        //We've seen it now
        seen[r][c] = true;
        //The area is the recursive definition of each surrounding cell
        //plus 1
        return (1 + area(r+1, c) + area(r-1, c)
                  + area(r, c-1) + area(r, c+1));
    }

    public int maxAreaOfIsland(int[][] grid) {
        //Create a global grid
        this.grid = grid;
        //Create a grid of seen locations
        seen = new boolean[grid.length][grid[0].length];
        
        //Find the max through the whole grid
        int ans = 0;
        for (int r = 0; r < grid.length; r++) {
            for (int c = 0; c < grid[0].length; c++) {
                ans = Math.max(ans, area(r, c));
            }
        }
        return ans;
    }
}

------------------------------------------------------------------------------------
------------------------------------------------------------------------------------

Notes:
------
Had the right idea about the problem but went wrong when I used a queue instead of
a stack. I should have stuck with my instincts and used a recursive approach first.

Complexity:
-----------
This one is a little tricky. The area function is O(4^n). The maxAreaOfIsland function is
O(n^2) with the inner loop being the area function. So, finally, the complexity is
O(n^2) * O(4^n) or O(n^3). 