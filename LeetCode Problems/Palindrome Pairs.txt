Palindrome Pairs - Hard Problem                                       	Brute force and Tries
---------------
---------------

Problem Statement
-----------------

Given a list of unique words, find all pairs of distinct indices (i, j) in the given
list, so that the concatenation of the two words, i.e. words[i] + words[j] is a palindrome.

Example 1:

Input: ["abcd","dcba","lls","s","sssll"]
Output: [[0,1],[1,0],[3,2],[2,4]] 
Explanation: The palindromes are ["dcbaabcd","abcddcba","slls","llssssll"]
Example 2:

Input: ["bat","tab","cat"]
Output: [[0,1],[1,0]] 
Explanation: The palindromes are ["battab","tabbat"]
			 
------------------------------------------------------------------------------------------

  public static List<List<Integer>> palindromePairs(String[] words) {
    
    List<List<Integer>> result = new ArrayList<>();
    
    for(int i = 0; i < words.length; i++) {
      for(int j = 0; j < words.length; j++) {
        if(i == j)
          continue;
        
        if(isPalindrome(words[i], words[j])) {
         List<Integer> indeces = new ArrayList<>();
         indeces.add(i);
         indeces.add(j);
         result.add(indeces);
        }
      }
    }
    
    
    return result;
  }
  
  public static boolean isPalindrome(String a, String b) {
   
    //Concatenate the strings
    String test = a + b;
    
    //Create a reverse string
    String test2 = new StringBuilder(test).reverse().toString();
    
    //Read the two strings in conjunction
    boolean palindrome = true;
    for(int i = 0; i < test.length; i++) {
      
      if(test.charAt(i) != test2.charAt(i)) {
        palindrome = false;
        break;
      }
        
    }
    
    return palindrome;
  }

------------------------------------------------------------------------------------
------------------------------------------------------------------------------------

Notes:

This solution words but it is O(n^3). Leetcode failed it because of time requirements.
Another solution is to use tries but I dont know how yet. Return to this.

Complexity:
-----------
O(n^3)