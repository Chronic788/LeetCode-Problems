Maximum Sub Array - Easy Problem                                       	Dynamic Programming
---------------
---------------

Problem Statement
-----------------

Given an integer array nums, find the contiguous subarray (containing at least one number)
which has the largest sum and return its sum.

Example:

Input: [-2,1,-3,4,-1,2,1,-5,4],
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.
Follow up:

If you have figured out the O(n) solution, try coding another solution using the divide 
and conquer approach, which is more subtle.
			 
------------------------------------------------------------------------------------------

Solution
--------

class MaximumSubarray {
  
  public static void main(String[] args) {
    new MaximumSubarray();
  }
  
  public MaximumSubarray() {
    
    int[] arr = new int[]{-2, 1, -3, 4, -1, 2, 1, -5, 4};
    
    printInt(maxSubArray(arr));
  }
  
  public void printInt(int i) {
    System.out.println(i);
  }
  
  public int maxSubArray(int[] nums) {
    
    if(nums == null || nums.length == 0) {
      return 0;
    }
    
    return findMax(nums);
    
  }
  
  public int findMax(int[] nums) {
    
    int[] memoizer = new int[nums.length + 1];
    
    int max = Integer.MIN_VALUE;
    
    for(int i = 1; i < memoizer.length; i++) {
      
      if(memoizer[i - 1] < 0){
       memoizer[i] = nums[i - 1]; 
      } else {
       memoizer[i] = nums[i - 1] + memoizer[i - 1]; 
      }
      
      max = Math.max(max, memoizer[i]);
    }
        
    return max;
  }
  
}

------------------------------------------------------------------------------------
------------------------------------------------------------------------------------

Complexity:
-----------
O(n)