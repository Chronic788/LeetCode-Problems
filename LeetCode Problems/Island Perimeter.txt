Island Perimeter - Easy Problem                                               2D Arrays
---------------
---------------

Problem Statement
-----------------

You are given a map in form of a two-dimensional integer grid where 1 represents land and 0
epresents water.

Grid cells are connected horizontally/vertically (not diagonally). The grid is completely
surrounded by water, and there is exactly one island (i.e., one or more connected land cells).

The island doesn't have "lakes" (water inside that isn't connected to the water around the
island). One cell is a square with side length 1. The grid is rectangular, width and height don't exceed 100. Determine the perimeter of the island.



Example:

Input:
[[0,1,0,0],
 [1,1,1,0],
 [0,1,0,0],
 [1,1,0,0]]

Output: 16

Explanation: The perimeter is the 16 yellow stripes in the image below:

------------------------------------------------------------------------------------------

Solution
--------


public class IslandPermimiter {

  public static void main(String[] args) {
    new IslandPerimeter();
  }

  public IslandPerimiter() {

  }

public int islandPerimeter(int[][] g) {
        int count = 0, n=g.length, m = g[0].length;
        for(int i=0; i < n; i++){
            for(int j=0; j < m; j++){
                if(g[i][j] == 1){
                    if(i-1 < 0 || g[i-1][j] == 0)
                        ++count;
                    if(i+1 == n || g[i+1][j] == 0)
                        ++count;
                    if(j-1 < 0 || g[i][j-1] == 0)
                        ++count;
                    if(j+1 == m || g[i][j+1] == 0)
                        ++count;
                }
            }
        }
        return count;
    }

}

------------------------------------------------------------------------------------
------------------------------------------------------------------------------------

Notes
-----

My solution looked a little different but it worked the same way. Saving this one
becuase it is prettier.

Complexity:
-----------
The complexity is O(n^2).
