Maximum Depth Of a Binary Tree - Easy Problem                  Binary Trees, Depth First Search
---------------
---------------

Problem Statement
-----------------
Given a binary tree, find its maximum depth.

The maximum depth is the number of nodes along the longest path from the root node down
to the farthest leaf node.

Note: A leaf is a node with no children.

Example:

Given binary tree [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7
return its depth = 3.

------------------------------------------------------------------------------------------

Solution
------------

class Solution {
    public int maxDepth(TreeNode root) {
        
        int maxDepth = 0;
        maxDepth = traverse(root, maxDepth);
        return maxDepth;
        
    }
    
    public int traverse(TreeNode root, int depth) {
      
        if(root != null){
            int left = traverse(root.left, depth + 1);
            int right = traverse(root.right, depth + 1);
            return Math.max(left, right);
        }
        
        return depth;
    }
    
}

------------------------------------------------------------------------------------
------------------------------------------------------------------------------------

Notes:
------
Got it on the first try.

Complexity:
-----------
O(2^n)