Add Two Numbers                                                     Stacks and Linked Lists
---------------
---------------

Problem Statement
-----------------

You are given two non-empty linked lists representing two non-negative integers.
The digits are stored in reverse order and each of their nodes contain a single
digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number
0 itself.

Example:

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807.

------------------------------------------------------------------------------------------

My Solution
------------

public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
    Stack<Integer> firstStack = new Stack<>();
    Stack<Integer> secondStack = new Stack<>();

    ListNode head = l1;
    while(head != null) {
        firstStack.push(l1.val);
        head = l1.next;
    }

    head = l2;
    while(head != null) {
        secondStack.push(l2.val);
        head = l2.next;
    }

    StringBuilder firstBuilder = new StringBuilder();
    while(!firstStack.empty()) {
        firstBuilder.append(firstStack.pop());
    }

    StringBuilder secondBuilder = new StringBuilder();
    while(!secondStack.empty()) {
        secondBuilder.append(secondStack.pop());
    }
    
    int firstNumber = Integer.parseInt(firstBuilder.toString());
    int secondNumber = Integer.parseInt(secondBuilder.toString());

    String newNumber = Integer.toString(firstNumber + secondNumber);

    ListNode newHead = new ListNode(0);
    for(int i = newNumber.length() - 1; i >= 0; i--) {
        char c = newNumber.charAt(i);
        StringBuilder b = new StringBuilder();
        b.append(c);
        newHead.val = Integer.parseInt(b.toString());
        newHead.next = new ListNode(0);
    }

    return newHead;
}

----------------
Online Solution
----------------

public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
    ListNode head = new ListNode(-1), t = head;

    int carry = 0;
    while(l1 != null || l2 != null || carry != 0) {
        if(l1 != null) {
            carry += l1.val;
            l1 = l1.next;
        }
        if(l2 != null) {
            carry += l2.val;
            l2 = l2.next;
        }
        t.next = new ListNode(carry%10);
        t = t.next;
        carry /= 10;
    }
    return head.next;
}

------------------------------------------------------------------------------------
------------------------------------------------------------------------------------

Complexity:
-----------
Order O(n).