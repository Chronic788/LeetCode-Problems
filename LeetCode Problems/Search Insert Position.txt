SearchInsertPosition                                          					Easy Problem
---------------
---------------

Problem Statement
-----------------

Given a sorted array and a target value, return the index if the target is found.
If not, return the index where it would be if it were inserted in order.

You may assume no duplicates in the array.

Example 1:

Input: [1,3,5,6], 5
Output: 2
Example 2:

Input: [1,3,5,6], 2
Output: 1
Example 3:

Input: [1,3,5,6], 7
Output: 4
Example 4:

Input: [1,3,5,6], 0
Output: 0
------------------------------------------------------------------------------------------

Solution
--------

public class SearchInsertPosition {
 
  public static void main(String[] args) {
    new SearchInsertPosition();
  }
  
  public SearchInsertPosition() {
    
    System.out.println(searchInsert(new int[]{1,3,5,6}, 5));
    System.out.println(searchInsert(new int[]{1,3,5,6}, 2));
    System.out.println(searchInsert(new int[]{1,3,5,6}, 7));
    System.out.println(searchInsert(new int[]{1,3,5,6}, 0));
    System.out.println(searchInsert(new int[]{1}, 1));
    System.out.println();
    System.out.println(searchInsertBinarySearch(new int[]{1,3,5,6}, 5));
    System.out.println(searchInsertBinarySearch(new int[]{1,3,5,6}, 2));
    System.out.println(searchInsertBinarySearch(new int[]{1,3,5,6}, 7));
    System.out.println(searchInsertBinarySearch(new int[]{1,3,5,6}, 0));
    System.out.println(searchInsertBinarySearch(new int[]{1}, 1));
  }
  
  public int searchInsert(int[] nums, int target) {
   
    if(nums == null) {
      return 0;
    }
    
    int insertedIndex = -1;
    for(int i = 0; i < nums.length; i++) {
     if(target == nums[i])
       return i;
     if(target < nums[i])
       if(insertedIndex == -1)
         insertedIndex = i;
    }
    
    if(insertedIndex == -1)
      return nums.length;
    
    return insertedIndex;
  }
  
  public int searchInsertBinarySearch(int[] nums, int target) {
    
    if(nums == null || nums.length == 0)
      return 0;
    
    //Set the front to 0
    int front = 0;
    //Set the back to the length of the array
    int back = nums.length - 1;
    //While the front hasnt overran the back
    while(front <= back) {
      
      //Set the midpoint to half of the front to back ratio
     int mid = (front + back) / 2;
     //If the number in the middle is greater than the target, set the back to the middle - 1
     if(nums[mid] > target)
       back = mid - 1;
     //If the number in the middle is less than the target, set the front to the middle + 1
     else if(nums[mid] < target)
       front = mid + 1;
     //If we have found the target, return the middle index;
     else
       return mid;
    }
    
    return front;
  }
  
}

------------------------------------------------------------------------------------
------------------------------------------------------------------------------------

Notes:

Whenever you see 'search' in the title, think binary search!

Complexity:
-----------
O(log n)