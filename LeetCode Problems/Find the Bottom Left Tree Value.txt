Find the Bottom Left Tree Value - Medium Problem                         Depth First Search
---------------
---------------

Problem Statement
-----------------

Given a binary tree, find the leftmost value in the last row of the tree.

Example 1:
Input:

    2
   / \
  1   3

Output:
1
Example 2: 
Input:

        1
       / \
      2   3
     /   / \
    4   5   6
       /
      7

Output:
7
Note: You may assume the tree (i.e., the given root node) is not NULL.

------------------------------------------------------------------------------------------

Solution
------------

class Solution {
    
    //Keep a list of the leftmost at each level. The
    //Left most node will reside at the end of the
    //list at the end of the traversal
    
    //At each new level create a new list. Add each
    //node to the list so that the first node will
    //be the leftmost node on that level. A preorder
    //traversal will give this
    
    Map<Integer, List<TreeNode>> map = new HashMap<>();
    
    public int findBottomLeftValue(TreeNode root) {
        
        traverse(root, 0);
        
        Set<Integer> keys = map.keySet();
        Integer max = Integer.MIN_VALUE;
        for(Integer key : keys)
        {
            if(key > max)
                max = key;
        }
        
        return map.get(max).get(0).val;
    }
    
    public void traverse(TreeNode node, int level) {
        
        if(node == null)
            return;
        
        if(map.containsKey(level)){
            map.get(level).add(node);
        } else {
            map.put(level, new ArrayList());
            map.get(level).add(node);
        }
        
        traverse(node.left, level + 1);
        traverse(node.right, level + 1);
    }
}
------------------------------------------------------------------------------------
------------------------------------------------------------------------------------

Notes
-----
Nailed it!

Complexity:
-----------
O(2^n)