Number Of Islands - Medium Problem											    Breadth First Search
---------------
---------------
Given a 2d grid map of '1's (land) and '0's (water), count the number of islands. An island is
surrounded by water and is formed by connecting adjacent lands horizontally or vertically. 
You may assume all four edges of the grid are all surrounded by water.

Example 1:

Input:
11110
11010
11000
00000

Output: 1
Example 2:

Input:
11000
11000
00100
00011

Output: 3


--------------------------------------------------------------------------------------------------

Solution
--------

//Okay so we have a 2d grid of 1s and 0s that represent land and water. The water are 0s
//and the land are 1s. An island is a group of one or more lands that are girded by 0s on
//all sides. We must iterate through the array and test each location for land and then
//spread out using Breadth first search to detect if there are adjacent waters. An island
//data structure would be represented by a List of the lands associated together.
//BFS is defined as neighbor first.

//Criteria for an island

//algo. if land and not grid

public class NumberOfIslands {
 
  public static void main(String[] args) {
    
   new NumberOfIslands(); 
  }
  
  public NumberOfIslands(){
    
    char[][] arr = {{1,1,1,1,0},{1,1,0,1,0},{1,1,0,0,0},{0,0,0,0,0}};
    System.out.println(numIslands(arr));
  }
  
  public int numIslands(char[][] grid) {
    
    if(grid == null || grid.length == 0)
      return 0;

    int numIslands = 0;
    for(int i = 0; i < grid.length; i++) {
      for(int j = 0; j < grid[0].length; j++) {
        //Whenever BFS is triggered
        if(grid[i][j] == '1') {
          ++numIslands;
          search(grid, i, j);
        }
      }
    }
        
    return numIslands;
  }
  
  //Recursively check to see if we are not on the water and shrink the islands as you go
  public void search(char[][] grid, int i, int j) {
   
    //As soon a we reach water, return because we are not on an island anymore
    if(i < 0 || j < 0 || i >= grid.length || j >= grid[0].length || grid[i][j] == '0')
      return;
    
    //Shrink the island
    grid[i][j] = '0';
    search(grid, i - 1, j);
    search(grid, i + 1, j);
    search(grid, i, j - 1);
    search(grid, i, j + 1);
  }
}
------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------

Complexity:
-----------
The complexity is O(n^3).