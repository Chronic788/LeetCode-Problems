Letter Combinations Of A Phone Number                                      Medium Problem
---------------
---------------

Problem Statement
-----------------

Given a string containing digits from 2-9 inclusive, return all possible letter 
combinations that the number could represent.

A mapping of digit to letters (just like on the telephone buttons) is given below.
 Note that 1 does not map to any letters.

Example:

Input: "23"
Output: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].
Note:

Although the above answer is in lexicographical order, your answer could be in 
any order you want.
			 
------------------------------------------------------------------------------------------

Solution
--------

import java.util.*;

public class LetterCombinationsInAPhoneNumber {
  
  public static void main(String[] args) {
    new LetterCombinationsInAPhoneNumber();
  }
  
  public LetterCombinationsInAPhoneNumber() {
    
    List<String> res = letterCombinations("23");
    
    for(String result : res) {
      System.out.println(result);
    }
  }
  
  private Map<Character, String> phone = new HashMap<Character, String>() {{
        put('2', "abc");
        put('3', "def");
        put('4', "ghi");
        put('5', "jkl");
        put('6', "mno");
        put('7', "pqrs");
        put('8', "tuv");
        put('9', "wxyz");
    }};
  
  public List<String> letterCombinations(String digits) {
        
    List<String> results = new ArrayList<>();
    
    if(digits == null || digits.isEmpty() || digits.equals("1"))
    {
      return results;
    }
        
    combos(digits, 0, results, "");
    
    return results;
  }
  
  private void combos(String digits, int index, List<String> results, String prefix) {

    if(index == digits.length()) {
      results.add(prefix);
      return;
    }
    
    String letters = phone.get(digits.charAt(index));
    for(int i = 0; i < letters.length(); i++) {
     combos(digits, index + 1, results, prefix + letters.charAt(i)); 
    }
    
  }
  
}

------------------------------------------------------------------------------------
------------------------------------------------------------------------------------


Notes:

Good example of iteration and recursion combined. I should do well if I remember this
pattern. Good example of how to use a hashmap too.

Complexty:
----------
O(n^n)