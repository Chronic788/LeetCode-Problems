Find Minimum In Sorted Rotated Array - Medium Problem               		Binary Search
---------------
---------------

Problem Statement
-----------------

Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e.,  [0,1,2,4,5,6,7] might become  [4,5,6,7,0,1,2]).

Find the minimum element.

You may assume no duplicate exists in the array.

Example 1:

Input: [3,4,5,1,2] 
Output: 1
Example 2:

Input: [4,5,6,7,0,1,2]
Output: 0
			 
------------------------------------------------------------------------------------------

Solution
--------

public class FindMinimumInRotatedSortedArray {
  
  public static void main(String[] args) {
    
    int[] arr = {3,4,5,1,2};
    System.out.println(findMin(arr));
    
    int[] arr2 = {4,5,6,7,0,1,2};
    System.out.println(findMin(arr2));
  }
  
  public static int findMin(int[] nums) {
    
    if(nums == null || nums.length == 0)
      return 0;
          
    if(nums.length == 1)
        return nums[0];
          
    //Check to see if it is already in sorted order
    if(nums[nums.length - 1] > nums[0])
        return nums[0];
      
      //Start binary search for the midpoint
    int start = 0;
    int end = nums.length - 1;
    
    while(start <= end) {
     
      int mid = (start + end) / 2;
      
      //Check for the inflection point
      if(nums[mid] > nums[mid + 1])
        return nums[mid + 1];
      
      if(nums[mid] < nums[mid - 1])
        return nums[mid];
      
      if(nums[mid] > nums[0])
        start = mid + 1;
      if(nums[mid] < nums[0])
        end = mid + 1;
      
    }
    
    return 0;
  }
  
}
------------------------------------------------------------------------------------
------------------------------------------------------------------------------------

Complexity:
-----------
This is Binary Search so it is O(log n). It is already in sorted order.