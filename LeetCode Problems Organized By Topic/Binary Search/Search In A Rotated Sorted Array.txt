Search in A Rotated Sorted Array - Medium Problem				               Binary Search
---------------
---------------

Problem Statement
-----------------

Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).

You are given a target value to search. If found in the array return its index, otherwise 
return -1.

You may assume no duplicate exists in the array.

Your algorithm's runtime complexity must be in the order of O(log n).

Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4
Example 2:

Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1

------------------------------------------------------------------------------------------

Solution
------------

public class SearchInRotatedArray {
 
  public static void main(String[] args) {
   new SearchInRotatedArray(); 
  }
  
  public SearchInRotatedArray() {
    int[] nums = new int[]{4,5,6,7,0,1,2};
    int target = 0;
    System.out.println(search(nums, target));
    nums = new int[]{4,5,6,7,0,1,2};
    target = 3;
    System.out.println(search(nums, target));
  }
  
  public int search(int[] nums, int target) {
    
    //Find the index of the smallest value
    int low = 0, high = nums.length - 1;
    while(low < high) {
      int mid = (low + high) / 2;
      if(nums[mid] > nums[high])
        low = mid + 1;
      else
        high = mid;
    }
    
    int rotated = low;
    low = 0;
    high = nums.length - 1;
    while(low <= high) {
     int mid = (low + high) / 2;
     int realMid = (mid + rotated) % nums.length;
     if(nums[realMid] == target)
       return realMid;
     if(nums[realMid] < target)
       low = mid + 1;
     else
       high = mid - 1;
    }
    
    return -1;
  }
  
}
------------------------------------------------------------------------------------
------------------------------------------------------------------------------------

Notes
-----
This was just dumb and tricky. Remember that whenever you are looking in an array,
apparently you can use binary search type methods even if it is not sorted.

Complexity:
-----------
O(log n)