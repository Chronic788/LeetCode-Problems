Peak Index in a Mountain Array - Easy Problem				               Binary Search
---------------
---------------

Problem Statement
-----------------

Let's call an array A a mountain if the following properties hold:

A.length >= 3
There exists some 0 < i < A.length - 1 such that A[0] < A[1] < ... A[i-1] < A[i] > A[i+1] > ... > A[A.length - 1]
Given an array that is definitely a mountain, return any i such that A[0] < A[1] < ... A[i-1] < A[i] > A[i+1] > ... > A[A.length - 1].

Example 1:

Input: [0,1,0]
Output: 1
Example 2:

Input: [0,2,1,0]
Output: 1
Note:

3 <= A.length <= 10000
0 <= A[i] <= 10^6
A is a mountain, as defined above.

------------------------------------------------------------------------------------------

Solution
------------

class Solution {
    public int peakIndexInMountainArray(int[] A) {
        return helper(A, 0, A.length - 1);        
    }
    
    int helper(int[] A, int s, int e) {
        final int mid = (s + e) / 2;
        // Check the neighboring numbers; if current num is higher than them, we have our result
        if (A[mid-1] < A[mid] && A[mid+1] < A[mid]) return mid;
        // We're on the decreasing side, search on the other side
        if (A[mid-1] > A[mid]) return helper(A, s, mid);
        // We're on the increasing side, search the other side
        else return helper(A, mid, e);
    }
}

------------------------------------------------------------------------------------
------------------------------------------------------------------------------------

Notes
-----
Didnt take time to read the problem description. This is a dumb problem because the
O(n) solution is so tempting. I dont like problems that try to fit themselves into
a mold of a solution like this one does.

Complexity:
-----------
O(log n)