Remove Duplicates From a Sorted Array : Easy Problem               Dumb Tricky Programming
---------------
---------------

Problem Statement
-----------------

Given a sorted array nums, remove the duplicates in-place such that each element appear 
only once and return the new length.

Do not allocate extra space for another array, you must do this by modifying the input 
array in-place with O(1) extra memory.

Example 1:

Given nums = [1,1,2],

Your function should return length = 2, with the first two elements of nums being 1 
and 2 respectively.

It doesn't matter what you leave beyond the returned length.
Example 2:

Given nums = [0,0,1,1,1,2,2,3,3,4],

Your function should return length = 5, with the first five elements of nums being 
modified to 0, 1, 2, 3, and 4 respectively.

It doesn't matter what values are set beyond the returned length.
			 
------------------------------------------------------------------------------------------

Solution
--------

public class RemoveDuplicatesFromSortedArray {
  
  public static void main(String[] args) {
    int[] test = {1,1,2};
    System.out.println(removeDuplicates(test));
    int[] test2 = {0,0,1,1,1,2,2,3,3,4};
    System.out.println(removeDuplicates(test2));
  }
  
  public static int removeDuplicates(int[] nums) {
    
    if (nums.length == 0) return 0;

    int i = 0;
    //Loop starting at 1 because the first element will never be a duplicate
    for (int j = 1; j < nums.length; j++) {
        //If the two numsers are not equal
        if (nums[j] != nums[i]) {
            //Increment i
            i++;
            //i represents the number set from 0 to j, the leading set that
            //needs to be changed. Change the number to the item in the array
            //that we are running over because it is a 'new' number
            nums[i] = nums[j];
        }
    }
    
    //Increment the index because there will always be a trailing number
    //that is not accounted for with the algorithm
    return i + 1;
  }
  
}
------------------------------------------------------------------------------------
------------------------------------------------------------------------------------

Complexity:
-----------
O(n)