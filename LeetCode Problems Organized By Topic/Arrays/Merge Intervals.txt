Merge Intervals - Medium Problem                                	      Arrays, Sorting
---------------
---------------

Problem Statement
-----------------

Given a collection of intervals, merge all overlapping intervals.

Example 1:

Input: [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].

Example 2:

Input: [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.

------------------------------------------------------------------------------------------

Solution
--------


// Okay so this will just a tricky little array
// problem. It is easy to see that if we sort the intervals
// by their starting indeces they will be easy to compare.
// I looked up using an anonymous sorting lambda to sort
// by the first indece:  Arrays.sort(intervals, (a, b) -> a[0] - b[0]);

public class MergeIntervals {

  public static void main(String[] args) {
    new MergeIntervals();
  }

  public MergeIntervals() {

  }

  public int[][] merge(int[][] intervals) {

    if(intervals == null || intervals.length == 0)
      return new int[][]{};

    //First we sort the intervals:
     Arrays.sort(intervals, (a, b) -> a[0] - b[0]);

     //Then we step through and look at each intervals
     //end time to see if it overlaps.
     //Keep a list of the intervals to record them
     List<int[]> intervalList = new ArrayList<>();

     //The first interval is always the first interval
     intervalList.add(intervals[0]);
     for(int i = 1; i < intervals.length; i++) {

       //Get the last interval
       int[] lastInterval = intervalList.get(intervalList.size() - 1);
       int[] currentInterval = intervals[i];

       //Do logic
       if(lastInterval[1] >= currentInterval[0] && currentInterval[1] >= lastInterval[0]) {
        //Merge
         lastInterval[0] = Math.min(lastInterval[0], currentInterval[0]);
         lastInterval[1] = Math.max(lastInterval[1], currentInterval[1]);
       } else
         intervalList.add(currentInterval);

     }

     int[][] result = new int[intervalList.size()][2];
     result = intervalList.toArray(result);

     return result;
  }

}

------------------------------------------------------------------------------------
------------------------------------------------------------------------------------

Notes
-----

Anonymous sorting. List to array.

Complexity:
-----------
O(n log n) becuase we are merge sorting before stepping through.
