Climbing Stairs - Easy Problem                                       	Dynamic Programming
---------------
---------------

Problem Statement
-----------------

You are climbing a stair case. It takes n steps to reach to the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

Note: Given n will be a positive integer.

Example 1:

Input: 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps
Example 2:

Input: 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step
			 
------------------------------------------------------------------------------------------

Solution
--------

import java.util.*;

class ClimbingStairs {
  
  static Map<Integer, Integer> dp = new HashMap<>();
  
  public static void main(String[] args) {
   
    System.out.println(climbStairs(2));
    System.out.println(climbStairs(3));
    System.out.println(climbStairs(6));
    
  }
  
  static public int climbStairs(int n) {
    
    if(n == 0)
      return 1;
    
    if(n < 0)
      return 0;
    
    if(dp.containsKey(n))
      return dp.get(n);
    
    int count = climbStairs(n - 1) + climbStairs(n - 2);
    dp.put(n, count);
    
    return count;
    
  }
  
}

------------------------------------------------------------------------------------
------------------------------------------------------------------------------------

Complexity:
-----------
O(n^2) because there may be two complete traversals for every one traversal of the
list.