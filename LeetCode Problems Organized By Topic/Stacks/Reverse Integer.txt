Reverse Integer - Easy Problem												Stacks and Strings
---------------

Problem Statement
-----------------
Given a 32-bit signed integer, reverse digits of an integer.

Example 1:

Input: 123
Output: 321
Example 2:

Input: -123
Output: -321
Example 3:

Input: 120
Output: 21
Note:
Assume we are dealing with an environment which could only store integers within the 32-bit
signed integer range: [−231,  231 − 1]. For the purpose of this problem, assume that your 
function returns 0 when the reversed integer overflows.

--------------------------------------------------------------------------------------------------

Solution
--------
class Solution {

    public int reverse(int x) {
    
        if(x == 0) {
            return 0;
        }
        
    char[] chars = ("" + x).toCharArray();
    
    //Add to list in reverse order, stripping negatives
    Stack<Character> charz = new Stack<>();
        boolean wasNeg = false;
    for(int i = 0; i < chars.length; i++) {
      char c = chars[i];
      if(c != '-') {
       charz.push(c); 
      } else {
          wasNeg = true;
      }
    }
    
    //Remove leading zeros
    while(charz.peek() == '0') {
      charz.pop();
    }
    
    //Add queue to list in reverse order
    StringBuilder b = new StringBuilder();
    while(!charz.isEmpty()){
      b.append(charz.pop());
    }
    
    String itg = b.toString();
    int i = 0;
    try{
        i = Integer.parseInt(itg);
    } catch (NumberFormatException n) {
        return 0;
    } 
            
    if(wasNeg) {
        i = i * -1;
    }   
        
    return i;
	
    }
	
}

------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------

Complexity:
-----------
O(n)